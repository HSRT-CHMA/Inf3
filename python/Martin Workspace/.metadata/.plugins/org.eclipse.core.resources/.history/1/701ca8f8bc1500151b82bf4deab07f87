'''
Created on 18.06.2015

@author: Martin Watolla
'''


from BinaryTree import BinaryTree
from RandomValue import RandomValue

class Test(object):
    
    def __init__(self):
        
        print("Starting with the Tests!")
    
        
    '''
    Method for Testing the Binary Tree with 
    - Creating a new Binary Tree
    - Adding Random Values to the Binary Tree
    - Output from Tree Height
    - Deleting a Value 
    - Output from Tree Height
    '''
    def testFloat(self):
        
        #Defining Variables to work with
        randomV = RandomValue()
        tree = BinaryTree()
        newItems = range(10)

        #Pull random strings into the Tree
        for i in newItems:
            newFloat = randomV.rFloat()
            print("Binary Tree add: ", newFloat)
            tree.insert(newFloat)

        #Output the added Strings
        print("Output of the Values:")
        tree.preOrderOutput()
        print(newFloat, tree.has(newFloat))

        #Print Height of the Tree
        print("Height of the Tree: ", tree.height(tree.getRootNode()))

        #Delete the temporary Value out of the Tree
        print("Deleting temporary Integer: ", newFloat)
        tree.delete(newFloat)
        print("Deleting complete")

        #Print Height of the Tree
        print("Height of the Tree: ", tree.height(tree.getRootNode()))

    '''
    Method for Testing the AVL Tree with 
    - Creating a new AVL Tree
    - Adding Random Values to the AVL Tree
    - Output from Tree Height
    - Deleting a Value 
    - Output from Tree Height
    '''
    def testString(self):
        
        #Defining Variables to work with
        randomV = RandomValue()
        tree = BinaryTree()
        newItems = range(10)

        #Pull random strings into the Tree
        for i in newItems:
            newString = randomV.rString()
            print("AVL-Tree add:", newString)
            tree.insert(newString)
            print("Value was added")

        #Output from the Tree
        print("AVL-Tree Output: ", tree.preOrderOutput())
        #Check if Value is in the AVL Tree
        #print("Is the Value: ", newString, " in Tree is? ", tree.has(newString))
        #Delete the Value out of the Tree
        #tree.delete(newString)
        print(newString, " was deleted out of the Tree")
        #Check if the Value is in the Tree
        print(newString, " is in the Tree: ", tree.has(newString))
        #Print Height of the Tree
        print("Tree Height: ", tree.getHeight())
        #Output of the Tree
        print("Output of the Tree: ", tree.preOrderOutput())
    
    